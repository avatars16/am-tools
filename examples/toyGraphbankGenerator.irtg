/* Example for the alto-demonstration paper*/
interpretation string: de.up.ling.irtg.algebra.StringAlgebra
interpretation graph: de.up.ling.irtg.algebra.graph.ApplyModifyGraphAlgebra


// non-terminals and their types
// S: ()
// NP: ()
// N: ()
// DET: ()
// VP_past: (s)
// V_intr_past: (s)
// V_trans_past: (s, o)
// COORD_empty: (op1, op2)

// -------------------------------- non-lexical rules ------------------------------------------- 

// -- sentence -- 
S! -> simpleSent(NP, VP_past) [1.0]
[string] *(?1,?2)
[graph]  APP_s(?2,?1)

// -- NP -- 
NP -> simpleNP(DET, N) [1.0]
[string] *(?1,?2)
[graph] ?2

// -- VP -- 
VP_past -> justVerbPast(V_intr_past) [1.0]
[string] ?1
[graph] ?1

VP_past -> transitivePast(V_trans_past, NP) [1.0]
[string] *(?1,?2)
[graph] APP_o(?1,?2)

// ------ coordination ------
NP -> coord_NP(NP, COORD_empty, NP) [0.1]
[string] *(?1,*(?2,?3))
[graph] APP_op2(APP_op1(?2,?1),?3)

S -> coord_S(S, COORD_empty, S) [0.1]
[string] *(?1,*(?2,?3))
[graph] APP_op2(APP_op1(?2,?1),?3)


// ----------------------------------- lexical rules ---------------------------------------- 

// ------------------------------- nouns ----------------------------
N -> mole [1.0]
[string] mole
[graph] '(u<root> / mole)'

N -> hole [1.0]
[string] hole
[graph] '(u<root> / hole)'

N -> cake [1.0]
[string] cake
[graph] '(u<root> / cake)'

N -> computer [1.0]
[string] computer
[graph] '(u<root> / computer)'

N -> book [1.0]
[string] book
[graph] '(u<root> / book)'

N -> painting [1.0]
[string] painting
[graph] '(u<root> / painting)'

// ------------------------------- verbs  ----------------------------

// ------------------ intransitive  --------------------

V_intr_past -> celebrate [1.0]
[string] celebrated
[graph] '(u<root> / celebrate :agent (v<s>))--TYPE--(s)'

V_intr_past -> walk [1.0]
[string] walked
[graph] '(u<root> / walk :agent (v<s>))--TYPE--(s)'

V_intr_past -> meditate [1.0]
[string] meditated
[graph] '(u<root> / meditate :agent (v<s>))--TYPE--(s)'

// ------------------ transitive  ---------------------

V_trans_past -> like [1.0]
[string] liked
[graph] '(u<root> / like :agent (v<s>) :patient (w<o>))--TYPE--(s,o)'

V_trans_past -> hate [1.0]
[string] hated
[graph] '(u<root> / hate :agent (v<s>) :patient (w<o>))--TYPE--(s,o)'

V_trans_past -> help [1.0]
[string] helped
[graph] '(u<root> / help :agent (v<s>) :patient (w<o>))--TYPE--(s,o)'

// ------------------------------- coordinators ----------------------------

// ---- EMPTY -----
COORD_empty -> and_EMPTY [1.0]
[string] and
[graph] '(u<root> / and :one (v<op1>) :two (w<op2>))--TYPE--(op1,op2)'

// ------------------------------- determiners ----------------------------
DET -> the [1.0]
[string] the
[graph] '(u<root> / DUMMY)'

DET -> a [1.0]
[string] a
[graph] '(u<root> / DUMMY)'